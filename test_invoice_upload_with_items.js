const fs = require("fs");
const path = require("path");

const csvContent = fs.readFileSync("test_invoices_with_items.csv", "utf8");
const lines = csvContent.split("\n").filter((line) => line.trim());

const headers = lines[0].split(",");
const invoices = [];

for (let i = 1; i < lines.length; i++) {
  if (lines[i].trim()) {
    const values = lines[i].split(",");
    const invoice = {};
    headers.forEach((header, index) => {
      // Clean up any carriage return characters
      let value = values[index] || "";
      value = value.replace(/\r/g, "").trim();
      // Also clean the header name
      const cleanHeader = header.replace(/\r/g, "").trim();
      invoice[cleanHeader] = value;
    });
    invoices.push(invoice);
  }
}

console.log("Parsed invoices with items:");
console.log(JSON.stringify(invoices, null, 2));

// Group invoices by row index since invoice_number will be generated by system
const invoiceGroups = {};
invoices.forEach((invoice, index) => {
  const rowKey = `row_${index}`;
  if (!invoiceGroups[rowKey]) {
    invoiceGroups[rowKey] = {
      header: {
        invoiceType: invoice.invoiceType,
        invoiceDate: invoice.invoiceDate,
        sellerNTNCNIC: invoice.sellerNTNCNIC,
        sellerBusinessName: invoice.sellerBusinessName,
        sellerProvince: invoice.sellerProvince,
        sellerAddress: invoice.sellerAddress,
        buyerNTNCNIC: invoice.buyerNTNCNIC,
        buyerBusinessName: invoice.buyerBusinessName,
        buyerProvince: invoice.buyerProvince,
        buyerAddress: invoice.buyerAddress,
        buyerRegistrationType: invoice.buyerRegistrationType,
        invoiceRefNo: invoice.invoiceRefNo,
        companyInvoiceRefNo: invoice.companyInvoiceRefNo,
        transctypeId: invoice.transctypeId,
      },
      items: [],
    };
  }

  // Extract item data if present
  const itemData = {};
  const itemFields = [
    "item_hsCode",
    "item_productDescription",
    "item_rate",
    "item_uoM",
    "item_quantity",
    "item_unitPrice",
    "item_totalValues",
    "item_valueSalesExcludingST",
    "item_fixedNotifiedValueOrRetailPrice",
    "item_salesTaxApplicable",
    "item_salesTaxWithheldAtSource",
    "item_extraTax",
    "item_furtherTax",
    "item_sroScheduleNo",
    "item_fedPayable",
    "item_discount",
    "item_saleType",
    "item_sroItemSerialNo",
  ];

  let hasItemData = false;
  itemFields.forEach((field) => {
    const cleanField = field.replace("item_", "");
    if (
      invoice[field] !== undefined &&
      invoice[field] !== null &&
      invoice[field] !== ""
    ) {
      itemData[cleanField] = invoice[field];
      hasItemData = true;
    }
  });

  if (hasItemData) {
    invoiceGroups[rowKey].items.push(itemData);
  }
});

console.log("\n=== Grouped Invoices Structure ===");
Object.entries(invoiceGroups).forEach(([rowKey, group]) => {
  console.log(`\nRow: ${rowKey}`);
  console.log(
    `Header: ${group.header.sellerBusinessName} -> ${group.header.buyerBusinessName}`
  );
  console.log(`Items: ${group.items.length}`);
  group.items.forEach((item, index) => {
    console.log(
      `  Item ${index + 1}: ${item.productDescription} - Qty: ${item.quantity} - Price: ${item.unitPrice}`
    );
  });
});

console.log("\nTest data ready for API testing:");
console.log("POST /tenant/{tenant_id}/invoices/bulk");
console.log("Body:", JSON.stringify({ invoices }, null, 2));
